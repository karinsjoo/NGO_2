/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sdgsweden;

import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author karin
 */
public class AvdelningsOversikt extends javax.swing.JFrame {
    private InfDB idb;
    private AnvandareBehorighet anvandareBehorighet;
    private HashMap<String, String> stadNamnTillId = new HashMap<>();
    private HashMap<String, String> chefNamnTillId = new HashMap<>();
    

    /**
     * Creates new form AvdelningsOversikt
     */
    public AvdelningsOversikt(InfDB idb, AnvandareBehorighet anvandareBehorighet) {
        initComponents();
        this.idb = idb;
        this.anvandareBehorighet = anvandareBehorighet;
        if (!anvandareBehorighet.isAdmin) {
            btnLaggTillAvdelning.setEnabled(false); 
            btnAndraAvdelning.setEnabled(false);    
        }
        fyllAvdelningar();
        fyllStader();
        fyllChefer();
        // Dölj fält och etiketter som inte används direkt
       
        txtNamn.setVisible(false);
        txtBeskrivning.setVisible(false);
        txtAdress.setVisible(false);
        txtEpostavd.setVisible(false);
        txtTelefonavd.setVisible(false);
    }
    
    private void visaPersonalPaAvdelning() {
        try {
            String sql = "SELECT fornamn, efternamn, epost FROM anstalld WHERE avdelning = '" + anvandareBehorighet.avdelningId + "'";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);

            DefaultListModel<String> modell = new DefaultListModel<>();

            for (HashMap<String, String> rad : resultat) {
                String radText = rad.get("fornamn") + " " + rad.get("efternamn") + " - " + rad.get("epost");
                modell.addElement(radText);
            }

            lstPersonal.setModel(modell);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta personal: " + e.getMessage(), "Fel", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void fyllAvdelningar() {
        try {
            String sql = "SELECT avdid, namn FROM avdelning";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);
            DefaultListModel<String> modell = new DefaultListModel<>();

            for (HashMap<String, String> rad : resultat) {
                modell.addElement(rad.get("avdid") + " - " + rad.get("namn"));
            }

            lstAvdelningar.setModel(modell);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta avdelningar: " + e.getMessage());
        }
    }

    private void fyllStader() {
        try {
            String sql = "SELECT sid, namn FROM stad";  // justera om din tabell heter annorlunda
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);
            cbStad.removeAllItems();
            stadNamnTillId.clear();

            for (HashMap<String, String> rad : resultat) {
                String sid = rad.get("sid");
                String namn = rad.get("namn");

                cbStad.addItem(namn);
                stadNamnTillId.put(namn, sid);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta städer: " + e.getMessage());
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPersonal = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstPersonal = new javax.swing.JList<>();
        btnVisaPersonal = new javax.swing.JButton();
        txtSok = new javax.swing.JTextField();
        btnSok = new javax.swing.JButton();
        lblSok = new javax.swing.JLabel();
        btnAterstall = new javax.swing.JButton();
        txtEpost = new javax.swing.JTextField();
        lblSokepost = new javax.swing.JLabel();
        btnStang = new javax.swing.JButton();
        lblAvdelningar = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstAvdelningar = new javax.swing.JList<>();
        txtNamn = new javax.swing.JTextField();
        txtAdress = new javax.swing.JTextField();
        txtEpostavd = new javax.swing.JTextField();
        txtBeskrivning = new javax.swing.JTextField();
        txtTelefonavd = new javax.swing.JTextField();
        btnLaggTillAvdelning = new javax.swing.JButton();
        btnAndraAvdelning = new javax.swing.JButton();
        cbStad = new javax.swing.JComboBox<>();
        cbChef = new javax.swing.JComboBox<>();
        lblStad = new javax.swing.JLabel();
        lblChef = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPersonal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPersonal.setText("Personal på min Avdelning");

        lstPersonal.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " ", " ", " ", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstPersonal);

        btnVisaPersonal.setText("Visa Personal");
        btnVisaPersonal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisaPersonalActionPerformed(evt);
            }
        });

        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        lblSok.setText("Sök namn");

        btnAterstall.setText("Återställ");
        btnAterstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAterstallActionPerformed(evt);
            }
        });

        lblSokepost.setText("Sök Epost");

        btnStang.setText("Stäng");
        btnStang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStangActionPerformed(evt);
            }
        });

        lblAvdelningar.setText("Avdelningar");

        jScrollPane2.setViewportView(lstAvdelningar);

        txtNamn.setText("Namn");

        txtAdress.setText("Adress");

        txtEpostavd.setText("Epost");

        txtBeskrivning.setText("Beskrivning");

        txtTelefonavd.setText("Telefon");

        btnLaggTillAvdelning.setText("Lägg till Avdelning");
        btnLaggTillAvdelning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillAvdelningActionPerformed(evt);
            }
        });

        btnAndraAvdelning.setText("Uppdatera");
        btnAndraAvdelning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraAvdelningActionPerformed(evt);
            }
        });

        cbStad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbChef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblStad.setText("Välj Stad");

        lblChef.setText("Välj chef");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAndraAvdelning)
                            .addComponent(btnLaggTillAvdelning))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbStad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblStad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnStang)
                                .addGap(65, 65, 65))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblChef, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPersonal, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnVisaPersonal)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(lblSok, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                            .addComponent(lblSokepost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(64, 64, 64)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEpost, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                            .addComponent(txtSok))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSok, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnAterstall, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAvdelningar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(267, 267, 267)
                                        .addComponent(txtEpostavd, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtTelefonavd, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(108, 108, 108)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtAdress, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPersonal)
                    .addComponent(btnVisaPersonal)
                    .addComponent(txtSok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSok))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSok)
                            .addComponent(lblSokepost))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAterstall)))
                .addGap(33, 33, 33)
                .addComponent(lblAvdelningar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBeskrivning, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEpostavd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTelefonavd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStad)
                    .addComponent(btnLaggTillAvdelning)
                    .addComponent(lblChef, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStang)
                    .addComponent(cbStad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAndraAvdelning))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVisaPersonalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisaPersonalActionPerformed
        visaPersonalPaAvdelning();
    }//GEN-LAST:event_btnVisaPersonalActionPerformed

    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
                                            
       
        String sokterm = txtSok.getText().trim();
        String ePost = txtEpost.getText().trim();

        if (sokterm.isEmpty() && ePost.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ange ett namn eller e-post att söka efter.");
            return;
        }

        if (!sokterm.isEmpty() && !Validering.arText(sokterm)) {
            JOptionPane.showMessageDialog(this, "Namnet får bara innehålla bokstäver, siffror, mellanslag och bindestreck.");
            return;
        }

        if (!ePost.isEmpty() && !Validering.arEpost(ePost)) {
            JOptionPane.showMessageDialog(this, "E-postadressen är inte i korrekt format.");
            return;
        }

        try {
            String sql = "SELECT fornamn, efternamn, epost FROM anstalld WHERE avdelning = '" + anvandareBehorighet.avdelningId + "'";

            if (!sokterm.isEmpty()) {
                sql += " AND (fornamn LIKE '%" + sokterm + "%' OR efternamn LIKE '%" + sokterm + "%')";
            }

            if (!ePost.isEmpty()) {
                sql += " AND epost LIKE '%" + ePost + "%'";
            }

            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);
            DefaultListModel<String> modell = new DefaultListModel<>();

            for (HashMap<String, String> rad : resultat) {
                String fornamn = rad.get("fornamn");
                String efternamn = rad.get("efternamn");
                String epost = rad.get("epost");
                modell.addElement(fornamn + " " + efternamn + " - " + epost);
            }

            lstPersonal.setModel(modell);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid sökning: " + e.getMessage());
        }
    
    }//GEN-LAST:event_btnSokActionPerformed

    private void fyllChefer() {

    try {
        String sql = "SELECT a.aid, a.fornamn, a.efternamn FROM anstalld a "
                   + "JOIN handlaggare h ON a.aid = h.aid";
        ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);

        cbChef.removeAllItems();
        chefNamnTillId.clear();

        for (HashMap<String, String> rad : resultat) {
            String aid = rad.get("aid");
            String namn = rad.get("fornamn") + " " + rad.get("efternamn");

            cbChef.addItem(namn);
            chefNamnTillId.put(namn, aid);
        }
    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Kunde inte hämta chefer: " + e.getMessage());
    }


    }


    private void btnAterstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAterstallActionPerformed
       
        try {
            String sql = "SELECT fornamn, efternamn, epost FROM anstalld WHERE avdelning = '" + anvandareBehorighet.avdelningId + "'";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);
            DefaultListModel<String> modell = new DefaultListModel<>();

            for (HashMap<String, String> rad : resultat) {
                String fornamn = rad.get("fornamn");
                String efternamn = rad.get("efternamn");
                String epost = rad.get("epost");
                modell.addElement(fornamn + " " + efternamn + " - " + epost);
            }

            lstPersonal.setModel(modell);
            txtSok.setText(""); // Töm sökfältet

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta personal: " + e.getMessage());
        }


    }//GEN-LAST:event_btnAterstallActionPerformed

    private void btnStangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStangActionPerformed
           dispose();
    }//GEN-LAST:event_btnStangActionPerformed

    private void btnLaggTillAvdelningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillAvdelningActionPerformed
                                                                                      
        String namn = JOptionPane.showInputDialog(this, "Namn:");
        String beskrivning = JOptionPane.showInputDialog(this, "Beskrivning:");
        String adress = JOptionPane.showInputDialog(this, "Adress:");
        String epost = JOptionPane.showInputDialog(this, "E-post:");
        String telefon = JOptionPane.showInputDialog(this, "Telefon:");
        String stadNamn = (String) cbStad.getSelectedItem();
        String chefNamn = (String) cbChef.getSelectedItem();
        String stad = stadNamnTillId.get(stadNamn);
        String chef = chefNamnTillId.get(chefNamn);

        if (namn == null || beskrivning == null || adress == null || epost == null || telefon == null) {
            return; // Avbröts av användaren
        }

        StringBuilder fel = new StringBuilder();

        if (!Validering.arText(namn)) {
            fel.append("Namn får endast innehålla bokstäver, siffror, mellanslag och bindestreck.\n");
        }

        if (!Validering.arEpost(epost)) {
            fel.append("Ogiltig e-postadress.\n");
        }

        if (!Validering.arText(telefon)) {
            fel.append("Telefon får endast innehålla siffror och eventuellt bindestreck.\n");
        }

        if (fel.length() > 0) {
            JOptionPane.showMessageDialog(this, fel.toString(), "Fel i inmatning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Hämta nästa tillgängliga avdelnings-ID
            String sqlMax = "SELECT MAX(avdid) + 1 FROM avdelning";
            String avdid = idb.fetchSingle(sqlMax);
            if (avdid == null) {
                avdid = "1";
            }

            // Infoga i databasen
            String sql = "INSERT INTO avdelning (avdid, namn, beskrivning, adress, epost, telefon, stad, chef) "
                    + "VALUES (" + avdid + ", '" + namn + "', '" + beskrivning + "', '" + adress + "', '" + epost + "', '" + telefon + "', " + stad + ", " + chef + ")";
            idb.insert(sql);

            JOptionPane.showMessageDialog(this, "Avdelning är tillagd.");
            fyllAvdelningar(); 

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid tillägg: " + e.getMessage(), "Databasfel", JOptionPane.ERROR_MESSAGE);
        }
    

    }//GEN-LAST:event_btnLaggTillAvdelningActionPerformed

    private void btnAndraAvdelningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraAvdelningActionPerformed
        
        String valdRad = lstAvdelningar.getSelectedValue();
        if (valdRad == null) {
            JOptionPane.showMessageDialog(this, "Välj en avdelning att ändra.");
            return;
        }

        String avdid = valdRad.split(" - ")[0]; // extrahera avdelnings-ID
        try {
            String sql = "SELECT * FROM avdelning WHERE avdid = " + avdid;
            HashMap<String, String> data = idb.fetchRow(sql);

            if (data != null) {
                String nyttNamn = JOptionPane.showInputDialog(this, "Namn:", data.get("namn"));
                String nyBeskrivning = JOptionPane.showInputDialog(this, "Beskrivning:", data.get("beskrivning"));
                String nyAdress = JOptionPane.showInputDialog(this, "Adress:", data.get("adress"));
                String nyEpost = JOptionPane.showInputDialog(this, "E-post:", data.get("epost"));
                String nyTelefon = JOptionPane.showInputDialog(this, "Telefon:", data.get("telefon"));
                String nyStad = JOptionPane.showInputDialog(this, "Stad-ID:", data.get("stad"));
                String nyChef = JOptionPane.showInputDialog(this, "Chef (aid):", data.get("chef"));

                // validering (exempel)
                StringBuilder fel = new StringBuilder();
                if (!Validering.arText(nyttNamn)) {
                    fel.append("Ogiltigt namn\n");
                }
                if (!Validering.arEpost(nyEpost)) {
                    fel.append("Ogiltig e-post\n");
                }
                if (!nyStad.matches("\\d+")) {
                    fel.append("Stad måste vara ett heltal\n");
                }
                if (!nyChef.matches("\\d+")) {
                    fel.append("Chef måste vara ett heltal\n");
                }

                if (fel.length() > 0) {
                    JOptionPane.showMessageDialog(this, fel.toString(), "Fel i inmatning", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                // uppdatera databasen
                String updateSql = "UPDATE avdelning SET "
                        + "namn = '" + nyttNamn + "', "
                        + "beskrivning = '" + nyBeskrivning + "', "
                        + "adress = '" + nyAdress + "', "
                        + "epost = '" + nyEpost + "', "
                        + "telefon = '" + nyTelefon + "', "
                        + "stad = " + nyStad + ", "
                        + "chef = " + nyChef + " "
                        + "WHERE avdid = " + avdid;

                idb.update(updateSql);
                JOptionPane.showMessageDialog(this, "Avdelningen är uppdaterad.");
                fyllAvdelningar(); // om du har en metod som uppdaterar listan

            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage());
        }

        
    }//GEN-LAST:event_btnAndraAvdelningActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvdelningsOversikt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvdelningsOversikt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvdelningsOversikt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvdelningsOversikt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AvdelningsOversikt().setVisible(true);
            }
        });
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAndraAvdelning;
    private javax.swing.JButton btnAterstall;
    private javax.swing.JButton btnLaggTillAvdelning;
    private javax.swing.JButton btnSok;
    private javax.swing.JButton btnStang;
    private javax.swing.JButton btnVisaPersonal;
    private javax.swing.JComboBox<String> cbChef;
    private javax.swing.JComboBox<String> cbStad;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAvdelningar;
    private javax.swing.JLabel lblChef;
    private javax.swing.JLabel lblPersonal;
    private javax.swing.JLabel lblSok;
    private javax.swing.JLabel lblSokepost;
    private javax.swing.JLabel lblStad;
    private javax.swing.JList<String> lstAvdelningar;
    private javax.swing.JList<String> lstPersonal;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtBeskrivning;
    private javax.swing.JTextField txtEpost;
    private javax.swing.JTextField txtEpostavd;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtSok;
    private javax.swing.JTextField txtTelefonavd;
    // End of variables declaration//GEN-END:variables
}
