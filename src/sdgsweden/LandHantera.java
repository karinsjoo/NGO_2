/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sdgsweden;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author karin
 */
public class LandHantera extends javax.swing.JFrame {

    private InfDB idb;
    private AnvandareBehorighet anvandareBehorighet;
    
    /**
     * Creates new form LandHantera
     */
    public LandHantera(InfDB idb, AnvandareBehorighet anvandareBehorighet) {
        
        initComponents();
        this.idb = idb;
        this.anvandareBehorighet = anvandareBehorighet;
        if (!anvandareBehorighet.isAdmin) {
            btnLaggTillLand.setEnabled(false); 
            btnAndraLand.setEnabled(false);
            
        }
        fyllLandLista(); 

        lstLand.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String vald = lstLand.getSelectedValue();
                if (vald != null) {
                    String lid = vald.split(" - ")[0];
                    fyllLandInfo(lid);
                }
            }
        });

    }

    private void fyllLandLista() {
        try {
            String sql = "SELECT lid, namn FROM land";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);

            DefaultListModel<String> modell = new DefaultListModel<>();
            for (HashMap<String, String> rad : resultat) {
                modell.addElement(rad.get("lid") + " - " + rad.get("namn"));
            }

            lstLand.setModel(modell);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta länder: " + e.getMessage());
        }
    }

    private void fyllLandInfo(String lid) {
        try {
            String sql = "SELECT * FROM land WHERE lid = " + lid;
            HashMap<String, String> land = idb.fetchRow(sql);

            if (land != null) {
                txtNamn.setText(land.get("namn"));
                txtSprak.setText(land.get("sprak"));
                txtValuta.setText(land.get("valuta"));
                txtTidszon.setText(land.get("tidszon"));
                txtPolitiskStruktur.setText(land.get("politisk_struktur"));
                txtEkonomi.setText(land.get("ekonomi"));
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid hämtning: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRubrik = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstLand = new javax.swing.JList<>();
        btnLaggTillLand = new javax.swing.JButton();
        btnAndraLand = new javax.swing.JButton();
        btnStang = new javax.swing.JButton();
        txtNamn = new javax.swing.JTextField();
        txtSprak = new javax.swing.JTextField();
        txtValuta = new javax.swing.JTextField();
        txtTidszon = new javax.swing.JTextField();
        txtPolitiskStruktur = new javax.swing.JTextField();
        txtEkonomi = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblRubrik.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRubrik.setText("Hantera länder");

        lstLand.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstLand);

        btnLaggTillLand.setText("Lägg till");
        btnLaggTillLand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillLandActionPerformed(evt);
            }
        });

        btnAndraLand.setText("Ändra");
        btnAndraLand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraLandActionPerformed(evt);
            }
        });

        btnStang.setText("Stäng");
        btnStang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStangActionPerformed(evt);
            }
        });

        txtNamn.setText("Namn");

        txtSprak.setText("Språk");

        txtValuta.setText("Valuta");

        txtTidszon.setText("Tidszon");

        txtPolitiskStruktur.setText("Politisk struktur");

        txtEkonomi.setText("Ekonomi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStang)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLaggTillLand)
                    .addComponent(btnAndraLand)
                    .addComponent(lblRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNamn)
                    .addComponent(txtSprak)
                    .addComponent(txtValuta)
                    .addComponent(txtTidszon)
                    .addComponent(txtPolitiskStruktur, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                    .addComponent(txtEkonomi))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRubrik)
                .addGap(78, 78, 78)
                .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSprak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtValuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtTidszon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtPolitiskStruktur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEkonomi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLaggTillLand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAndraLand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(btnStang)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStangActionPerformed
        dispose();
    }//GEN-LAST:event_btnStangActionPerformed

    private void btnLaggTillLandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillLandActionPerformed
       
        String namn = JOptionPane.showInputDialog(this, "Landets namn:");
        String sprak = JOptionPane.showInputDialog(this, "Språk:");
        String valuta = JOptionPane.showInputDialog(this, "Valuta:");
        String tidszon = JOptionPane.showInputDialog(this, "Tidszon:");
        String politiskStruktur = JOptionPane.showInputDialog(this, "Politisk struktur:");
        String ekonomi = JOptionPane.showInputDialog(this, "Ekonomi:");

        if (namn == null || sprak == null || valuta == null || tidszon == null || politiskStruktur == null || ekonomi == null) {
            return; // användaren avbröt
        }

        
        StringBuilder fel = new StringBuilder();
        if (!Validering.arText(namn)) {
            fel.append("Namnet får bara innehålla bokstäver/siffror.\n");
        }

        if (!Validering.arText(sprak)) {
            fel.append("Språk får bara innehålla bokstäver/siffror.\n");
        }

        if (!Validering.arKostnad(valuta)) {
            fel.append("Valuta får bara innehålla siffror.\n");
        }

        if (fel.length() > 0) {
            JOptionPane.showMessageDialog(this, fel.toString(), "Fel i inmatning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Hämta nästa lediga lid
            String sqlMax = "SELECT MAX(lid) + 1 FROM land";
            String lid = idb.fetchSingle(sqlMax);
            if (lid == null) {
                lid = "1";
            }

            String sql = "INSERT INTO land (lid, namn, sprak, valuta, tidszon, politisk_struktur, ekonomi) "
                    + "VALUES (" + lid + ", '" + namn + "', '" + sprak + "', '" + valuta + "', '" + tidszon + "', '" + politiskStruktur + "', '" + ekonomi + "')";
            idb.insert(sql);

            JOptionPane.showMessageDialog(this, "Landet har lagts till.");
            fyllLandLista(); // uppdatera listan

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid tillägg: " + e.getMessage(), "Databasfel", JOptionPane.ERROR_MESSAGE);
        }
    

    }//GEN-LAST:event_btnLaggTillLandActionPerformed

    private void btnAndraLandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraLandActionPerformed
       
    String valdRad = lstLand.getSelectedValue();

    if (valdRad == null) {
        JOptionPane.showMessageDialog(this, "Välj ett land i listan.");
        return;
    }

    String lid = valdRad.split(" - ")[0];  // Antag att listan visar "lid - namn"

    try {
        // Hämta nuvarande info om landet
        String sql = "SELECT * FROM land WHERE lid = " + lid;
        HashMap<String, String> landData = idb.fetchRow(sql);

        if (landData == null) {
            JOptionPane.showMessageDialog(this, "Kunde inte hitta land i databasen.");
            return;
        }

        // Be användaren ändra varje fält
        String namn = JOptionPane.showInputDialog(this, "Namn:", landData.get("namn"));
        String sprak = JOptionPane.showInputDialog(this, "Språk:", landData.get("sprak"));
        String valuta = JOptionPane.showInputDialog(this, "Valuta:", landData.get("valuta"));
        String tidszon = JOptionPane.showInputDialog(this, "Tidszon:", landData.get("tidszon"));
        String politiskStruktur = JOptionPane.showInputDialog(this, "Politisk struktur:", landData.get("politisk_struktur"));
        String ekonomi = JOptionPane.showInputDialog(this, "Ekonomi:", landData.get("ekonomi"));

        // Validering
        StringBuilder fel = new StringBuilder();
        if (!Validering.arText(namn)) fel.append("Namnet är ogiltigt.\n");
        if (!Validering.arText(sprak)) fel.append("Språket är ogiltigt.\n");
        if (!Validering.arText(valuta)) fel.append("Valutan är ogiltig.\n");

        if (fel.length() > 0) {
            JOptionPane.showMessageDialog(this, fel.toString(), "Fel i inmatning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Uppdatera databasen
        String updateSql = "UPDATE land SET "
                + "namn = '" + namn + "', "
                + "sprak = '" + sprak + "', "
                + "valuta = '" + valuta + "', "
                + "tidszon = '" + tidszon + "', "
                + "politisk_struktur = '" + politiskStruktur + "', "
                + "ekonomi = '" + ekonomi + "' "
                + "WHERE lid = " + lid;

        idb.update(updateSql);

        JOptionPane.showMessageDialog(this, "Landet har uppdaterats.");
        fyllLandLista(); // uppdatera listan

    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage(), "Databasfel", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnAndraLandActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LandHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LandHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LandHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LandHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new LandHantera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAndraLand;
    private javax.swing.JButton btnLaggTillLand;
    private javax.swing.JButton btnStang;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRubrik;
    private javax.swing.JList<String> lstLand;
    private javax.swing.JTextField txtEkonomi;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtPolitiskStruktur;
    private javax.swing.JTextField txtSprak;
    private javax.swing.JTextField txtTidszon;
    private javax.swing.JTextField txtValuta;
    // End of variables declaration//GEN-END:variables
}
