/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sdgsweden;

import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
/**
 *
 * @author karin
 */
public class PartnerHantera extends javax.swing.JFrame {
    private InfDB idb;
    private AnvandareBehorighet anvandareBehorighet;
    /**
     * Creates new form PartnerHantera
     */
    public PartnerHantera(InfDB idb, AnvandareBehorighet anvandareBehorighet) {
        initComponents();
        this.idb = idb;
        this.anvandareBehorighet = anvandareBehorighet;
        if (!anvandareBehorighet.isAdmin) {
            btnLaggTillPartner.setEnabled(false); 
            btnAndraPartner.setEnabled(false);
            btnTaBortPartner.setEnabled(false);
        }
        lstPartner.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                String valdRad = lstPartner.getSelectedValue();
                if (valdRad != null) {
                    String pid = valdRad.split(" - ")[0];
                    fyllPartnerInfo(pid);
                }
            }
        });

        fyllPartnerLista();
    }

    private void fyllPartnerLista() {
        try {
            String sql = "SELECT pid, namn FROM partner";
            ArrayList<HashMap<String, String>> resultat = idb.fetchRows(sql);

            DefaultListModel<String> modell = new DefaultListModel<>();

            for (HashMap<String, String> rad : resultat) {
                String item = rad.get("pid") + " - " + rad.get("namn");
                modell.addElement(item);
            }

            lstPartner.setModel(modell);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta partner: " + e.getMessage());
        }
    }

    private void fyllPartnerInfo(String pid) {
        try {
            String sql = "SELECT * FROM partner WHERE pid = " + pid;
            HashMap<String, String> partner = idb.fetchRow(sql);

            if (partner != null) {
                txtNamn.setText(partner.get("namn"));
                txtKontaktperson.setText(partner.get("kontaktperson"));
                txtKontaktepost.setText(partner.get("kontaktepost"));
                txtTelefon.setText(partner.get("telefon"));
                txtAdress.setText(partner.get("adress"));
                txtBranch.setText(partner.get("branch"));
                txtStad.setText(partner.get("stad"));
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Kunde inte hämta partnerinfo: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstPartner = new javax.swing.JList<>();
        lblRubrik = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        txtKontaktperson = new javax.swing.JTextField();
        txtKontaktepost = new javax.swing.JTextField();
        txtTelefon = new javax.swing.JTextField();
        txtAdress = new javax.swing.JTextField();
        txtBranch = new javax.swing.JTextField();
        txtStad = new javax.swing.JTextField();
        btnLaggTillPartner = new javax.swing.JButton();
        btnAndraPartner = new javax.swing.JButton();
        btnTaBortPartner = new javax.swing.JButton();
        btnSpara = new javax.swing.JButton();
        btnStang = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstPartner.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(lstPartner);

        lblRubrik.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblRubrik.setText("Hantera Partner");

        txtNamn.setText("Namn");

        txtKontaktperson.setText("Kontaktperson");

        txtKontaktepost.setText("Epost");

        txtTelefon.setText("Telefon");

        txtAdress.setText("Adress");

        txtBranch.setText("Bransch");

        txtStad.setText("Stad");

        btnLaggTillPartner.setText("Lägg till");
        btnLaggTillPartner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggTillPartnerActionPerformed(evt);
            }
        });

        btnAndraPartner.setText("Ändra");

        btnTaBortPartner.setText("Ta bort");
        btnTaBortPartner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortPartnerActionPerformed(evt);
            }
        });

        btnSpara.setText("Spara ");
        btnSpara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSparaActionPerformed(evt);
            }
        });

        btnStang.setText("Stäng");
        btnStang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLaggTillPartner)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAndraPartner)
                                .addGap(49, 49, 49)
                                .addComponent(btnTaBortPartner))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSpara)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtKontaktperson, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                            .addComponent(txtBranch, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtKontaktepost, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnStang)
                                            .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(txtStad, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtNamn, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(txtAdress))
                    .addComponent(lblRubrik, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRubrik)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKontaktperson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKontaktepost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBranch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLaggTillPartner)
                    .addComponent(btnAndraPartner)
                    .addComponent(btnTaBortPartner))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSpara)
                    .addComponent(btnStang))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLaggTillPartnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggTillPartnerActionPerformed
       
    String namn = JOptionPane.showInputDialog(this, "Namn:");
    String kontaktperson = JOptionPane.showInputDialog(this, "Kontaktperson:");
    String kontaktepost = JOptionPane.showInputDialog(this, "Kontakt-e-post:");
    String telefon = JOptionPane.showInputDialog(this, "Telefon:");
    String adress = JOptionPane.showInputDialog(this, "Adress:");
    String branch = JOptionPane.showInputDialog(this, "Bransch:");
    String stad = JOptionPane.showInputDialog(this, "Stad (ID):");

    if (namn == null || kontaktperson == null || kontaktepost == null || telefon == null || adress == null || branch == null || stad == null) {
        return; // Användaren avbröt
    }

    StringBuilder fel = new StringBuilder();

    if (!Validering.arText(namn)) {
        fel.append("Namn får bara innehålla bokstäver, siffror, mellanslag och bindestreck.\n");
    }

    if (!Validering.arText(kontaktperson)) {
        fel.append("Kontaktperson får bara innehålla text.\n");
    }

    if (!Validering.arEpost(kontaktepost)) {
        fel.append("Ogiltig e-postadress.\n");
    }

    if (!Validering.arText(telefon)) {
        fel.append("Telefon får endast innehålla siffror och ev. bindestreck.\n");
    }

    if (!stad.matches("\\d+")) {
        fel.append("Stad måste vara ett heltal (ID).\n");
    }

    if (fel.length() > 0) {
        JOptionPane.showMessageDialog(this, fel.toString(), "Fel i inmatning", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Hämta nästa tillgängliga pid
        String sqlMax = "SELECT MAX(pid) + 1 FROM partner";
        String pid = idb.fetchSingle(sqlMax);
        if (pid == null) {
            pid = "1";
        }

        String sql = "INSERT INTO partner (pid, namn, kontaktperson, kontaktepost, telefon, adress, branch, stad) VALUES "
                   + "(" + pid + ", '" + namn + "', '" + kontaktperson + "', '" + kontaktepost + "', '" + telefon + "', '" + adress + "', '" + branch + "', " + stad + ")";
        idb.insert(sql);

        JOptionPane.showMessageDialog(this, "Partner tillagd.");
        fyllPartnerLista();

    } catch (InfException e) {
        JOptionPane.showMessageDialog(this, "Fel vid tillägg: " + e.getMessage(), "Databasfel", JOptionPane.ERROR_MESSAGE);
    }


    }//GEN-LAST:event_btnLaggTillPartnerActionPerformed

    private void btnTaBortPartnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortPartnerActionPerformed
       
    String valdRad = lstPartner.getSelectedValue();

    if (valdRad == null) {
        JOptionPane.showMessageDialog(this, "Välj en partner att ta bort.");
        return;
    }

    
   String pid = valdRad.split(" - ")[0];

    int bekrafta = JOptionPane.showConfirmDialog(this, "Är du säker på att du vill ta bort:\n" + valdRad, "Bekräfta", JOptionPane.YES_NO_OPTION);

    if (bekrafta == JOptionPane.YES_OPTION) {
        try {
            // Hämta pid via epost
            
            if (valdRad == null) {
                JOptionPane.showMessageDialog(this, "Välj en partner att ta bort.");
                return;
            }

            

            if (pid != null) {
                String sql = "DELETE FROM partner WHERE pid = " + pid;
                idb.delete(sql);
                idb.delete(sql);

                JOptionPane.showMessageDialog(this, "Partner borttagen.");
                fyllPartnerLista(); // Uppdatera listan
            } else {
                JOptionPane.showMessageDialog(this, "Kunde inte hitta partner i databasen.");
            }

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid borttagning: " + e.getMessage());
        }
    }

    }//GEN-LAST:event_btnTaBortPartnerActionPerformed

    private void btnStangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStangActionPerformed
        dispose();
    }//GEN-LAST:event_btnStangActionPerformed

    private void btnSparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSparaActionPerformed
        
        String valdRad = lstPartner.getSelectedValue();

        if (valdRad == null) {
            JOptionPane.showMessageDialog(this, "Välj en partner i listan.");
            return;
        }

        String pid = valdRad.split(" - ")[0];

        // Hämta fält
        String namn = txtNamn.getText().trim();
        String kontaktperson = txtKontaktperson.getText().trim();
        String epost = txtKontaktepost.getText().trim();
        String telefon = txtTelefon.getText().trim();
        String adress = txtAdress.getText().trim();
        String branch = txtBranch.getText().trim();
        String stad = txtStad.getText().trim();

        // Enkel validering (lägg till mer om du vill)
        if (namn.isEmpty() || epost.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Namn och e-post får inte vara tomma.");
            return;
        }

        try {
            String sql = "UPDATE partner SET "
                    + "namn = '" + namn + "', "
                    + "kontaktperson = '" + kontaktperson + "', "
                    + "kontaktepost = '" + epost + "', "
                    + "telefon = '" + telefon + "', "
                    + "adress = '" + adress + "', "
                    + "branch = '" + branch + "', "
                    + "stad = " + stad + " "
                    + "WHERE pid = " + pid;

            idb.update(sql);
            JOptionPane.showMessageDialog(this, "Partner uppdaterad!");
            fyllPartnerLista();

        } catch (InfException e) {
            JOptionPane.showMessageDialog(this, "Fel vid uppdatering: " + e.getMessage());
        }
    

    }//GEN-LAST:event_btnSparaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PartnerHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PartnerHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PartnerHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PartnerHantera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new PartnerHantera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAndraPartner;
    private javax.swing.JButton btnLaggTillPartner;
    private javax.swing.JButton btnSpara;
    private javax.swing.JButton btnStang;
    private javax.swing.JButton btnTaBortPartner;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblRubrik;
    private javax.swing.JList<String> lstPartner;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtBranch;
    private javax.swing.JTextField txtKontaktepost;
    private javax.swing.JTextField txtKontaktperson;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtStad;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
